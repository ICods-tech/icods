{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _AccessibilityUtil = _interopRequireDefault(require(\"../../modules/AccessibilityUtil\"));\n\nvar _createDOMProps = _interopRequireDefault(require(\"../../modules/createDOMProps\"));\n\nvar _unstableNativeDependencies = require(\"react-dom/unstable-native-dependencies\");\n\nvar _normalizeNativeEvent = _interopRequireDefault(require(\"../../modules/normalizeNativeEvent\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _ResponderEventPlugin = _interopRequireDefault(require(\"../../modules/ResponderEventPlugin\"));\n\n(0, _unstableNativeDependencies.injectEventPluginsByName)({\n  ResponderEventPlugin: _ResponderEventPlugin.default\n});\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\nvar eventHandlerNames = {\n  onBlur: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onResponderRelease: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true\n};\n\nvar adjustProps = function adjustProps(domProps) {\n  var onClick = domProps.onClick,\n      onResponderRelease = domProps.onResponderRelease,\n      role = domProps.role;\n  var isButtonLikeRole = _AccessibilityUtil.default.buttonLikeRoles[role];\n\n  var isDisabled = _AccessibilityUtil.default.isDisabled(domProps);\n\n  var isLinkRole = role === 'link';\n  Object.keys(domProps).forEach(function (propName) {\n    var prop = domProps[propName];\n    var isEventHandler = typeof prop === 'function' && eventHandlerNames[propName];\n\n    if (isEventHandler) {\n      if (isButtonLikeRole && isDisabled) {\n        domProps[propName] = undefined;\n      } else {\n        domProps[propName] = function (e) {\n          e.nativeEvent = (0, _normalizeNativeEvent.default)(e.nativeEvent);\n          return prop(e);\n        };\n      }\n    }\n  });\n\n  if (isLinkRole && onResponderRelease) {\n    domProps.onClick = function (e) {\n      if (!e.isDefaultPrevented() && !isModifiedEvent(e.nativeEvent) && !domProps.target) {\n        e.preventDefault();\n      }\n    };\n  }\n\n  if (isButtonLikeRole && !isDisabled) {\n    domProps.onKeyPress = function (e) {\n      if (!e.isDefaultPrevented() && (e.which === 13 || e.which === 32)) {\n        e.preventDefault();\n\n        if (onClick) {\n          onClick(e);\n        }\n      }\n    };\n  }\n};\n\nvar createElement = function createElement(component, props) {\n  var accessibilityComponent;\n\n  if (component && component.constructor === String) {\n    accessibilityComponent = _AccessibilityUtil.default.propsToAccessibilityComponent(props);\n  }\n\n  var Component = accessibilityComponent || component;\n  var domProps = (0, _createDOMProps.default)(Component, props);\n  adjustProps(domProps);\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  return _react.default.createElement.apply(_react.default, [Component, domProps].concat(children));\n};\n\nvar _default = createElement;\nexports.default = _default;","map":{"version":3,"sources":["/Volumes/Wand/Workspace/ICods/ICods/mobile/icodsMobile/node_modules/react-native-web/dist/exports/createElement/index.js"],"names":["ResponderEventPlugin","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","eventHandlerNames","onBlur","onClick","onClickCapture","onContextMenu","onFocus","onResponderRelease","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","adjustProps","domProps","role","isButtonLikeRole","AccessibilityUtil","buttonLikeRoles","isDisabled","isLinkRole","Object","keys","forEach","propName","prop","isEventHandler","undefined","e","nativeEvent","isDefaultPrevented","target","preventDefault","onKeyPress","which","createElement","component","props","accessibilityComponent","constructor","String","propsToAccessibilityComponent","Component","_len","arguments","length","children","Array","_key","React","apply","concat"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport createDOMProps from '../../modules/createDOMProps';\nimport { injectEventPluginsByName } from 'react-dom/unstable-native-dependencies';\nimport normalizeNativeEvent from '../../modules/normalizeNativeEvent';\nimport React from 'react';\nimport ResponderEventPlugin from '../../modules/ResponderEventPlugin';\ninjectEventPluginsByName({\n  ResponderEventPlugin: ResponderEventPlugin\n});\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n/**\n * Ensure event handlers receive an event of the expected shape. The 'button'\n * role â€“ for accessibility reasons and functional equivalence to the native\n * button element â€“ must also support synthetic keyboard activation of onclick,\n * and remove event handlers when disabled.\n */\n\n\nvar eventHandlerNames = {\n  onBlur: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onResponderRelease: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true\n};\n\nvar adjustProps = function adjustProps(domProps) {\n  var onClick = domProps.onClick,\n      onResponderRelease = domProps.onResponderRelease,\n      role = domProps.role;\n  var isButtonLikeRole = AccessibilityUtil.buttonLikeRoles[role];\n  var isDisabled = AccessibilityUtil.isDisabled(domProps);\n  var isLinkRole = role === 'link';\n  Object.keys(domProps).forEach(function (propName) {\n    var prop = domProps[propName];\n    var isEventHandler = typeof prop === 'function' && eventHandlerNames[propName];\n\n    if (isEventHandler) {\n      if (isButtonLikeRole && isDisabled) {\n        domProps[propName] = undefined;\n      } else {\n        // TODO: move this out of the render path\n        domProps[propName] = function (e) {\n          e.nativeEvent = normalizeNativeEvent(e.nativeEvent);\n          return prop(e);\n        };\n      }\n    }\n  }); // Cancel click events if the responder system is being used on a link\n  // element. Click events are not an expected part of the React Native API,\n  // and browsers dispatch click events that cannot otherwise be cancelled from\n  // preceding mouse events in the responder system.\n\n  if (isLinkRole && onResponderRelease) {\n    domProps.onClick = function (e) {\n      if (!e.isDefaultPrevented() && !isModifiedEvent(e.nativeEvent) && !domProps.target) {\n        e.preventDefault();\n      }\n    };\n  } // Button-like roles should trigger 'onClick' if SPACE or ENTER keys are pressed.\n\n\n  if (isButtonLikeRole && !isDisabled) {\n    domProps.onKeyPress = function (e) {\n      if (!e.isDefaultPrevented() && (e.which === 13 || e.which === 32)) {\n        e.preventDefault();\n\n        if (onClick) {\n          onClick(e);\n        }\n      }\n    };\n  }\n};\n\nvar createElement = function createElement(component, props) {\n  // use equivalent platform elements where possible\n  var accessibilityComponent;\n\n  if (component && component.constructor === String) {\n    accessibilityComponent = AccessibilityUtil.propsToAccessibilityComponent(props);\n  }\n\n  var Component = accessibilityComponent || component;\n  var domProps = createDOMProps(Component, props);\n  adjustProps(domProps);\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  return React.createElement.apply(React, [Component, domProps].concat(children));\n};\n\nexport default createElement;"]},"metadata":{},"sourceType":"script"}