{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createDOMProps = _interopRequireDefault(require(\"../createDOMProps\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _styleResolver = _interopRequireDefault(require(\"../../exports/StyleSheet/styleResolver\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    _UIManager.default.blur((0, _findNodeHandle.default)(this));\n  },\n  focus: function focus() {\n    _UIManager.default.focus((0, _findNodeHandle.default)(this));\n  },\n  measure: function measure(callback) {\n    _UIManager.default.measure((0, _findNodeHandle.default)(this), callback);\n  },\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager.default.measureInWindow((0, _findNodeHandle.default)(this), callback);\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    _UIManager.default.measureLayout((0, _findNodeHandle.default)(this), relativeToNativeNode, onFail, onSuccess);\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = (0, _findNodeHandle.default)(this);\n\n    if (node) {\n      var domProps = (0, _createDOMProps.default)(null, nativeProps, function (style) {\n        return _styleResolver.default.resolveWithNode(style, node);\n      });\n\n      _UIManager.default.updateView(node, domProps, this);\n    }\n  }\n};\nvar _default = NativeMethodsMixin;\nexports.default = _default;","map":{"version":3,"sources":["/Volumes/Wand/Workspace/ICods/ICods/mobile/icodsMobile/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"names":["NativeMethodsMixin","blur","UIManager","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","node","domProps","style","styleResolver","resolveWithNode","updateView"],"mappings":";;;;;;;AASA;;AACA;;AACA;;AACA;;AACA,IAAIA,kBAAkB,GAAG;AAIvBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBC,uBAAUD,IAAV,CAAe,6BAAe,IAAf,CAAf;AACD,GANsB;AAYvBE,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBD,uBAAUC,KAAV,CAAgB,6BAAe,IAAf,CAAhB;AACD,GAdsB;AAmBvBC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClCH,uBAAUE,OAAV,CAAkB,6BAAe,IAAf,CAAlB,EAAwCC,QAAxC;AACD,GArBsB;AAsCvBC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBD,QAAzB,EAAmC;AAClDH,uBAAUI,eAAV,CAA0B,6BAAe,IAAf,CAA1B,EAAgDD,QAAhD;AACD,GAxCsB;AA6CvBE,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,oBAAvB,EAA6CC,SAA7C,EAAwDC,MAAxD,EAAgE;AAC7ER,uBAAUK,aAAV,CAAwB,6BAAe,IAAf,CAAxB,EAA8CC,oBAA9C,EAAoEE,MAApE,EAA4ED,SAA5E;AACD,GA/CsB;AAuDvBE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACnD,QAAI,CAACA,WAAL,EAAkB;AAChB;AACD;;AAED,QAAIC,IAAI,GAAG,6BAAe,IAAf,CAAX;;AAEA,QAAIA,IAAJ,EAAU;AAGR,UAAIC,QAAQ,GAAG,6BAAe,IAAf,EAAqBF,WAArB,EAAkC,UAAUG,KAAV,EAAiB;AAChE,eAAOC,uBAAcC,eAAd,CAA8BF,KAA9B,EAAqCF,IAArC,CAAP;AACD,OAFc,CAAf;;AAGAX,yBAAUgB,UAAV,CAAqBL,IAArB,EAA2BC,QAA3B,EAAqC,IAArC;AACD;AACF;AAtEsB,CAAzB;eAwEed,kB","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;"]},"metadata":{},"sourceType":"script"}