{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsFocused;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction useIsFocused() {\n  var navigation = (0, _useNavigation.default)();\n\n  var _useState = (0, React.useState)(navigation.isFocused),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isFocused = _useState2[0],\n      setIsFocused = _useState2[1];\n\n  var valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAMe,SAAA,YAAA,GAAiC;AAC9C,MAAMA,UAAU,GAAhB,6BAAA;;AAD8C,kBAEZC,oBAASD,UAAU,CAArD,SAAkCC,CAFY;AAAA;AAAA,MAExC,SAFwC;AAAA,MAExC,YAFwC;;AAI9C,MAAMC,aAAa,GAAGF,UAAU,CAAhC,SAAsBA,EAAtB;;AAEA,MAAIG,SAAS,KAAb,aAAA,EAAiC;AAM/BC,IAAAA,YAAY,CAAZA,aAAY,CAAZA;AACD;;AAEDC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,gBAAgB,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;AAAA,aACvDI,YAAY,CADd,IACc,CAD2C;AAAA,KAAhCJ,CAAzB;AAIA,QAAMO,eAAe,GAAGP,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;AAAA,aACrDI,YAAY,CADd,KACc,CADyC;AAAA,KAA/BJ,CAAxB;AAIA,WAAO,YAAM;AACXM,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AATFF,GAAAA,EAaG,CAbHA,UAaG,CAbHA;AAeAA,EAAAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;AAEA,SAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"script"}