{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ListView = _interopRequireDefault(require(\"../ListView\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SwipeableListViewDataSource = _interopRequireDefault(require(\"./SwipeableListViewDataSource\"));\n\nvar _SwipeableRow = _interopRequireDefault(require(\"../SwipeableRow\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar SwipeableListView = function (_React$Component) {\n  _inheritsLoose(SwipeableListView, _React$Component);\n\n  SwipeableListView.getNewDataSource = function getNewDataSource() {\n    return new _SwipeableListViewDataSource.default({\n      getRowData: function getRowData(data, sectionID, rowID) {\n        return data[sectionID][rowID];\n      },\n      getSectionHeaderData: function getSectionHeaderData(data, sectionID) {\n        return data[sectionID];\n      },\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1 !== row2;\n      },\n      sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {\n        return s1 !== s2;\n      }\n    });\n  };\n\n  function SwipeableListView(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this._listViewRef = null;\n    _this._shouldBounceFirstRowOnMount = false;\n\n    _this._onScroll = function (e) {\n      if (_this.props.dataSource.getOpenRowID()) {\n        _this.setState({\n          dataSource: _this.state.dataSource.setOpenRowID(null)\n        });\n      }\n\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n\n    _this._renderRow = function (rowData, sectionID, rowID) {\n      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);\n\n      if (!slideoutView) {\n        return _this.props.renderRow(rowData, sectionID, rowID);\n      }\n\n      var shouldBounceOnMount = false;\n\n      if (_this._shouldBounceFirstRowOnMount) {\n        _this._shouldBounceFirstRowOnMount = false;\n        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();\n      }\n\n      return _react.default.createElement(_SwipeableRow.default, {\n        slideoutView: slideoutView,\n        isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),\n        maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),\n        key: rowID,\n        onOpen: function onOpen() {\n          return _this._onOpen(rowData.id);\n        },\n        onClose: function onClose() {\n          return _this._onClose(rowData.id);\n        },\n        onSwipeEnd: function onSwipeEnd() {\n          return _this._setListViewScrollable(true);\n        },\n        onSwipeStart: function onSwipeStart() {\n          return _this._setListViewScrollable(false);\n        },\n        shouldBounceOnMount: shouldBounceOnMount\n      }, _this.props.renderRow(rowData, sectionID, rowID));\n    };\n\n    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;\n    _this.state = {\n      dataSource: _this.props.dataSource\n    };\n    return _this;\n  }\n\n  var _proto = SwipeableListView.prototype;\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {\n      this.setState({\n        dataSource: nextProps.dataSource\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    return _react.default.createElement(_ListView.default, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        _this2._listViewRef = _ref;\n      },\n      dataSource: this.state.dataSource.getDataSource(),\n      onScroll: this._onScroll,\n      renderRow: this._renderRow\n    }));\n  };\n\n  _proto._setListViewScrollable = function _setListViewScrollable(value) {\n    if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value\n      });\n    }\n  };\n\n  _proto.getScrollResponder = function getScrollResponder() {\n    if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {\n      return this._listViewRef.getScrollResponder();\n    }\n  };\n\n  _proto._getMaxSwipeDistance = function _getMaxSwipeDistance(rowData, sectionID, rowID) {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  };\n\n  _proto._onOpen = function _onOpen(rowID) {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID)\n    });\n  };\n\n  _proto._onClose = function _onClose(rowID) {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null)\n    });\n  };\n\n  return SwipeableListView;\n}(_react.default.Component);\n\nSwipeableListView.defaultProps = {\n  bounceFirstRowOnMount: false,\n  renderQuickActions: function renderQuickActions() {\n    return null;\n  }\n};\nSwipeableListView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  bounceFirstRowOnMount: _propTypes.default.bool.isRequired,\n  dataSource: _propTypes.default.instanceOf(_SwipeableListViewDataSource.default).isRequired,\n  maxSwipeDistance: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.func]).isRequired,\n  renderRow: _propTypes.default.func.isRequired,\n  renderQuickActions: _propTypes.default.func.isRequired\n} : {};\nvar _default = SwipeableListView;\nexports.default = _default;","map":{"version":3,"sources":["/Volumes/Wand/Workspace/ICods/ICods/mobile/icodsMobile/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","SwipeableListView","_React$Component","getNewDataSource","SwipeableListViewDataSource","getRowData","data","sectionID","rowID","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","props","context","_this","_listViewRef","_shouldBounceFirstRowOnMount","_onScroll","e","dataSource","getOpenRowID","setState","state","setOpenRowID","onScroll","_renderRow","rowData","slideoutView","renderQuickActions","renderRow","shouldBounceOnMount","getFirstRowID","React","createElement","SwipeableRow","isOpen","id","maxSwipeDistance","_getMaxSwipeDistance","onOpen","_onOpen","onClose","_onClose","onSwipeEnd","_setListViewScrollable","onSwipeStart","bounceFirstRowOnMount","_proto","UNSAFE_componentWillReceiveProps","nextProps","getDataSource","render","_this2","ListView","ref","_ref","value","setNativeProps","scrollEnabled","getScrollResponder","Component","defaultProps","propTypes","process","env","NODE_ENV","PropTypes","bool","isRequired","instanceOf","oneOfType","number","func"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule SwipeableListView\n * \n */\n'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport ListView from '../ListView';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SwipeableListViewDataSource from './SwipeableListViewDataSource';\nimport SwipeableRow from '../SwipeableRow';\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nvar SwipeableListView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(SwipeableListView, _React$Component);\n\n  SwipeableListView.getNewDataSource = function getNewDataSource() {\n    return new SwipeableListViewDataSource({\n      getRowData: function getRowData(data, sectionID, rowID) {\n        return data[sectionID][rowID];\n      },\n      getSectionHeaderData: function getSectionHeaderData(data, sectionID) {\n        return data[sectionID];\n      },\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1 !== row2;\n      },\n      sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {\n        return s1 !== s2;\n      }\n    });\n  };\n\n  function SwipeableListView(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this._listViewRef = null;\n    _this._shouldBounceFirstRowOnMount = false;\n\n    _this._onScroll = function (e) {\n      // Close any opens rows on ListView scroll\n      if (_this.props.dataSource.getOpenRowID()) {\n        _this.setState({\n          dataSource: _this.state.dataSource.setOpenRowID(null)\n        });\n      }\n\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n\n    _this._renderRow = function (rowData, sectionID, rowID) {\n      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID); // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n\n\n      if (!slideoutView) {\n        return _this.props.renderRow(rowData, sectionID, rowID);\n      }\n\n      var shouldBounceOnMount = false;\n\n      if (_this._shouldBounceFirstRowOnMount) {\n        _this._shouldBounceFirstRowOnMount = false;\n        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();\n      }\n\n      return React.createElement(SwipeableRow, {\n        slideoutView: slideoutView,\n        isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),\n        maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),\n        key: rowID,\n        onOpen: function onOpen() {\n          return _this._onOpen(rowData.id);\n        },\n        onClose: function onClose() {\n          return _this._onClose(rowData.id);\n        },\n        onSwipeEnd: function onSwipeEnd() {\n          return _this._setListViewScrollable(true);\n        },\n        onSwipeStart: function onSwipeStart() {\n          return _this._setListViewScrollable(false);\n        },\n        shouldBounceOnMount: shouldBounceOnMount\n      }, _this.props.renderRow(rowData, sectionID, rowID));\n    };\n\n    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;\n    _this.state = {\n      dataSource: _this.props.dataSource\n    };\n    return _this;\n  }\n\n  var _proto = SwipeableListView.prototype;\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {\n      this.setState({\n        dataSource: nextProps.dataSource\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    return React.createElement(ListView, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        _this2._listViewRef = _ref;\n      },\n      dataSource: this.state.dataSource.getDataSource(),\n      onScroll: this._onScroll,\n      renderRow: this._renderRow\n    }));\n  };\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _proto._setListViewScrollable = function _setListViewScrollable(value) {\n    if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value\n      });\n    }\n  } // Passing through ListView's getScrollResponder() function\n  ;\n\n  _proto.getScrollResponder = function getScrollResponder() {\n    if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {\n      return this._listViewRef.getScrollResponder();\n    }\n  } // This enables rows having variable width slideoutView.\n  ;\n\n  _proto._getMaxSwipeDistance = function _getMaxSwipeDistance(rowData, sectionID, rowID) {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  };\n\n  _proto._onOpen = function _onOpen(rowID) {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID)\n    });\n  };\n\n  _proto._onClose = function _onClose(rowID) {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null)\n    });\n  };\n\n  return SwipeableListView;\n}(React.Component);\n\nSwipeableListView.defaultProps = {\n  bounceFirstRowOnMount: false,\n  renderQuickActions: function renderQuickActions() {\n    return null;\n  }\n};\nSwipeableListView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * To alert the user that swiping is possible, the first row can bounce\n   * on component mount.\n   */\n  bounceFirstRowOnMount: PropTypes.bool.isRequired,\n\n  /**\n   * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n   * then use it just like you would a normal ListView data source\n   */\n  dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,\n  // Maximum distance to open to after a swipe\n  maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n  // Callback method to render the swipeable view\n  renderRow: PropTypes.func.isRequired,\n  // Callback method to render the view that will be unveiled on swipe\n  renderQuickActions: PropTypes.func.isRequired\n} : {};\nexport default SwipeableListView;"]},"metadata":{},"sourceType":"script"}