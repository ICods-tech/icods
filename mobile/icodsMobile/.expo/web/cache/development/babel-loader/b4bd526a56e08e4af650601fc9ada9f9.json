{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SafeAreaProviderCompat;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _reactNativeIphoneXHelper = require(\"react-native-iphone-x-helper\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar initialSafeAreaInsets = _objectSpread({\n  top: (0, _reactNativeIphoneXHelper.getStatusBarHeight)(true),\n  bottom: (0, _reactNativeIphoneXHelper.getBottomSpace)(),\n  right: 0,\n  left: 0\n}, _reactNativeSafeAreaContext.initialWindowSafeAreaInsets);\n\nfunction SafeAreaProviderCompat(_ref) {\n  var children = _ref.children;\n  return React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {\n    if (insets) {\n      return children;\n    }\n\n    return React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n      initialSafeAreaInsets: initialSafeAreaInsets\n    }, children);\n  });\n}","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["initialSafeAreaInsets","top","getStatusBarHeight","bottom","right","left","children","insets"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,qBAAqB,GAAA,aAAA,CAAA;AAEzBC,EAAAA,GAAG,EAAEC,kDAFoB,IAEpBA,CAFoB;AAGzBC,EAAAA,MAAM,EAHmB,+CAAA;AAIzBC,EAAAA,KAAK,EAJoB,CAAA;AAKzBC,EAAAA,IAAI,EAAE;AALmB,CAAA,EAA3B,uDAA2B,CAA3B;;AAee,SAAA,sBAAA,OAAqD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAClE,SACE,KAAA,CAAA,aAAA,CAAA,4CAAA,EAAA,IAAA,EACGC,UAAAA,MAAM,EAAI;AACT,QAAA,MAAA,EAAY;AAIV,aAAA,QAAA;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAA,4CAAA,EAAA;AAAkB,MAAA,qBAAqB,EAAEP;AAAzC,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD","sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nconst initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {insets => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}