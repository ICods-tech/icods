{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCurrentRender;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _CurrentRenderContext = _interopRequireDefault(require(\"./CurrentRenderContext\"));\n\nfunction useCurrentRender(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var current = React.useContext(_CurrentRenderContext.default);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}","map":{"version":3,"sources":["useCurrentRender.tsx"],"names":["descriptors","current","React","navigation","state"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAee,SAAA,gBAAA,OAIH;AAAA,MAJ6B,KAI7B,QAJ6B,KAI7B;AAAA,MAJ6B,UAI7B,QAJ6B,UAI7B;AAAA,MADVA,WACU,QADVA,WACU;AACV,MAAMC,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAhB,6BAAgBA,CAAhB;;AAEA,MAAID,OAAO,IAAIE,UAAU,CAAzB,SAAeA,EAAf,EAAuC;AACrCF,IAAAA,OAAO,CAAPA,OAAAA,GAAkBD,WAAW,CAACI,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAZJ,GAAW,CAAXA,CAAlBC,OAAAA;AACD;AACF","sourcesContent":["import * as React from 'react';\nimport type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport CurrentRenderContext from './CurrentRenderContext';\nimport type { Descriptor, NavigationHelpers } from './types';\n\ntype Options = {\n  state: NavigationState;\n  navigation: NavigationHelpers<ParamListBase>;\n  descriptors: {\n    [key: string]: Descriptor<ParamListBase, string, NavigationState, object>;\n  };\n};\n\n/**\n * Write the current options, so that server renderer can get current values\n * Mutating values like this is not safe in async mode, but it doesn't apply to SSR\n */\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors,\n}: Options) {\n  const current = React.useContext(CurrentRenderContext);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}