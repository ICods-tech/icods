{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction useNavigationState(selector) {\n  var navigation = (0, _useNavigation.default)();\n\n  var _React$useState = React.useState(function () {\n    return selector(navigation.dangerouslyGetState());\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.dangerouslyGetState());\n}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AASe,SAAA,kBAAA,CAAA,QAAA,EAAyD;AACtE,MAAMA,UAAU,GADsD,6BACtE;;AADsE,wBAKhDC,KAAK,CAALA,QAAAA,CAAe;AAAA,WACnCC,QAAQ,CAACF,UAAU,CANiD,mBAM3DA,EAAD,CAD2B;AAAA,GAAfC,CALgD;AAAA;AAAA,MAKhE,SALgE;;AAUtE,MAAME,WAAW,GAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AADFF,GAAAA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMG,WAAW,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiCC,UAAAA,CAAD,EAAO;AACzDC,MAAAA,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG;AADF,KAAoB,CAApB;AAIA,WAAA,WAAA;AALFL,GAAAA,EAMG,CANHA,UAMG,CANHA;AAQA,SAAOC,QAAQ,CAACF,UAAU,CAA1B,mBAAgBA,EAAD,CAAf;AACD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]},"metadata":{},"sourceType":"script"}